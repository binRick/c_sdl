#pragma once
#ifndef CONSOLE_C
#define CONSOLE_C
#define CONSOLE_WINDOW_WIDTH 640
#define CONSOLE_WINDOW_HEIGHT 480
#define CONSOLE_TIMESTAMP_INTERVAL_MS 100
#define CONSOLE_EVENTS_QTY 20
#define LOCAL_DEBUG_MODE    CONSOLE_DEBUG_MODE
#define container_of(ptr, type, member) ({ \
                        const typeof( ((type*)0)->member ) \
                        * __mptr = ((void*)(ptr)); \
                        (type*)( (char*)__mptr - \
                        offsetof(type, member) ); \
                        })
////////////////////////////////////////////
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <signal.h>
#include "console/console.h"
////////////////////////////////////////////
#include "ansi-codes/ansi-codes.h"
#include "bytes/bytes.h"
#include "tempdir.c/tempdir.h"
#include "c_fsio/include/fsio.h"
#include "c_string_buffer/include/stringbuffer.h"
#include "c_stringfn/include/stringfn.h"
#include "clamp/clamp.h"
#include "c_vector/vector/vector.h"
#include "log/log.h"
#include "ms/ms.h"
#include "timestamp/timestamp.h"
#include "incbin/incbin.h"
INCBIN(font_glasstty,"assets/Glass_TTY_VT220.ttf");
#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
////////////////////////////////////////////
struct console_event_t {
  SDL_Event event;
  char *text;
  int x, y,qty;
  int r,g,b;
};
static struct console_event_t **events;
static size_t events_qty;
static struct Vector *events_v =NULL;
static char *text;
static int qty;
static bool CONSOLE_DEBUG_MODE = false;
static void __attribute__((constructor)) __constructor__console(void);
static int InputThread(void *ptr);
static int TimestampThread(void *ptr);
int console_main(int argc, char *args[]);
////////////////////////////////////////////
static int TimestampThread(void *ptr){
  events_qty=0;
  while(1) {
    struct console_event_t *e = calloc(1,sizeof(struct console_event_t));
    asprintf(&(e->text),"%lld",timestamp());
    e->x=15;
    e->qty=qty;
    e->y = clamp(qty*15, 0, CONSOLE_WINDOW_HEIGHT);
    if(qty>3){
      e->r=128;
      e->g=128;
    }else if(qty>5){
      e->r=0;
      e->g=128;
      e->b=128;
    }
  
    ((SDL_Event*)ptr)->user.data1 = (void*)e;
    SDL_PushEvent((SDL_Event *)ptr);
    qty++;
    usleep(1000*CONSOLE_TIMESTAMP_INTERVAL_MS);
    events_qty++;
  }
}
static int InputThread(void *ptr) {
  while(1) {
    printf("Enter text (max 80 chars): "); fflush(stdout);
    fgets(text, sizeof(text), stdin);
    text[strcspn(text, "\n")] = 0;
    if (strlen(text) > 80) {
      fprintf(stderr, "Warning: input text exceeds 80 characters and will be truncated.\n"); fflush(stderr);
      text[79] = 0;
    } else {
      fprintf(stderr, "Info: length of input text is %lu.\n", strlen(text)); fflush(stderr);
    }
    fflush(stdin);
    SDL_PushEvent((SDL_Event *)ptr);
  }
}

int console_main(int argc, char *args[]) {
  events_v=vector_new_with_options(CONSOLE_EVENTS_QTY,false);
  Uint32 USER_EVENT_TYPE1;
  SDL_Event txt_event;
  struct console_event_t event;
  SDL_Thread *thread;
  int width, height;

  TTF_Init();
  char *tf;
  asprintf(&tf,"%s%d%lld",gettempdir(),getpid(),timestamp());
  fsio_write_binary_file(tf,(char*)gfont_glassttyData,gfont_glassttySize);
  TTF_Font *font = TTF_OpenFont(tf, 20);
  fsio_remove(tf);
  SDL_Init(SDL_INIT_VIDEO);
  SDL_Window *window = SDL_CreateWindow("SDL Console output example",
            SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, CONSOLE_WINDOW_HEIGHT, CONSOLE_WINDOW_WIDTH, SDL_WINDOW_SHOWN);
  SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, 0);
  SDL_RenderClear(renderer);

  USER_EVENT_TYPE1 = SDL_RegisterEvents(1);
  SDL_memset(&txt_event, 0, sizeof(txt_event));
  SDL_memset(&event, 0, sizeof(struct console_event_t));
  event.event.type = USER_EVENT_TYPE1;
  event.event.user.data1 = (void*)&event;
  txt_event.type = USER_EVENT_TYPE1;
  txt_event.user.data1 = NULL;

  thread = SDL_CreateThread(TimestampThread, "TimestampThread", (void *)&event);
  //thread = SDL_CreateThread(InputThread, "InputThread", (void *)&event);

  struct console_event_t *ee;
  struct console_event_t *e;
  while (1) {
    SDL_Event event;
    SDL_WaitEvent(&event);
    if (event.type == SDL_QUIT) {
      printf("Event type SDL_QUIT occurred.\n"); fflush(stdout);
      break;
    }
    if (event.type == USER_EVENT_TYPE1) {
      e=(struct console_event_t*)event.user.data1;
      while(vector_size(events_v)>=CONSOLE_EVENTS_QTY-1)
        vector_pop(events_v);
      SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
      SDL_RenderClear(renderer);

      log_info("adding %lu events",vector_size(events_v));
      for(size_t i=0;i<vector_size(events_v);i++){
        ee=(struct console_event_t*)vector_get(events_v,i);
        log_info("adding event #%lu \"%s\" @%dx%d Color %d/%d/%d",i+1,ee->text,ee->x,ee->y,ee->r,ee->g,ee->b);
        SDL_Color colour = {ee->r,ee->g,ee->b};
        SDL_Surface *surface = TTF_RenderText_Solid(font, ee->text, colour);
        SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, surface);
        SDL_QueryTexture(texture, NULL, NULL, &width, &height);  
        SDL_Rect rect = {ee->x, ee->y, width, height};
        SDL_RenderCopy(renderer, texture, NULL, &rect);
      }
      if(true){
        SDL_Color colour = {e->r,e->g,e->b};
        SDL_Surface *surface = TTF_RenderText_Solid(font, e->text, colour);
        SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, surface);
        SDL_QueryTexture(texture, NULL, NULL, &width, &height);  
        SDL_Rect rect = {e->x, e->y, width, height};
        SDL_RenderCopy(renderer, texture, NULL, &rect);
        SDL_RenderPresent(renderer);
        SDL_DestroyTexture(texture);
        SDL_FreeSurface(surface);
      }
      vector_push(events_v,(void*)e);
   //   SDL_RaiseWindow(window);
    }
  }
  printf("Exited event loop.\n"); fflush(stdout);

  printf("Release resources.\n"); fflush(stdout);
  TTF_CloseFont(font);
  SDL_DestroyRenderer(renderer);
  SDL_DestroyWindow(window);
  TTF_Quit();
  SDL_Quit();

  printf("Finished.\n"); fflush(stdout);
  return 0;
}
static void __attribute__((constructor)) __constructor__console(void){
  if (getenv("DEBUG") != NULL || getenv("DEBUG_console") != NULL) {
    log_debug("Enabling console Debug Mode");
    CONSOLE_DEBUG_MODE = true;
  }
}
#undef LOCAL_DEBUG_MODE
#endif
